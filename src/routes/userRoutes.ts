import { Router } from "express";
import {
  createUser,
  getUsers,
  getUserById,
  updateUser,
  deleteUser,
} from "../handlers/User";
import { body, param } from "express-validator";
import { handleInputErrors } from "../middleware";

const router = Router();

// üìå GET all users
router.get("/", getUsers);

// üìå GET user by id
router.get(
  "/:id",
  param("id").isInt().withMessage("ID no v√°lido"),
  handleInputErrors,
  getUserById
);

// üìå POST create user
router.post(
  "/",
  body("name")
    .notEmpty().withMessage("El nombre no puede ir vac√≠o")
    .isLength({ min: 2, max: 50 }).withMessage("El nombre debe tener entre 2 y 50 caracteres")
    .matches(/^[a-zA-Z√°√©√≠√≥√∫√Å√â√ç√ì√ö√±√ë\s]+$/).withMessage("El nombre solo puede contener letras, espacios y acentos"),
  body("lastname")
    .notEmpty().withMessage("El apellido no puede ir vac√≠o")
    .isLength({ min: 2, max: 50 }).withMessage("El apellido debe tener entre 2 y 50 caracteres")
    .matches(/^[a-zA-Z√°√©√≠√≥√∫√Å√â√ç√ì√ö√±√ë\s]+$/).withMessage("El apellido solo puede contener letras, espacios y acentos"),
  body("email")
    .isEmail().withMessage("El email no es v√°lido")
    .normalizeEmail(),
  body("password")
    .notEmpty().withMessage("La contrase√±a no puede ir vac√≠a")
    .isLength({ min: 6, max: 100 }).withMessage("La contrase√±a debe tener entre 6 y 100 caracteres"),
  body("phone")
    .matches(/^\d+$/).withMessage("El tel√©fono debe ser un n√∫mero")
    .isLength({ min: 10, max: 15 }).withMessage("El tel√©fono debe tener entre 10 y 15 d√≠gitos"),
  body("cuit")
    .matches(/^\d+$/).withMessage("El CUIT debe ser un n√∫mero")
    .isLength({ min: 11, max: 11 }).withMessage("El CUIT debe tener exactamente 11 d√≠gitos"),
  handleInputErrors,
  createUser
);

// üìå PUT update user
router.put(
  "/:id",
  param("id").isInt().withMessage("ID no v√°lido"),
  body("name")
    .notEmpty().withMessage("El nombre no puede ir vac√≠o")
    .isLength({ min: 2, max: 50 }).withMessage("El nombre debe tener entre 2 y 50 caracteres")
    .matches(/^[a-zA-Z√°√©√≠√≥√∫√Å√â√ç√ì√ö√±√ë\s]+$/).withMessage("El nombre solo puede contener letras, espacios y acentos"),
  body("lastname")
    .notEmpty().withMessage("El apellido no puede ir vac√≠o")
    .isLength({ min: 2, max: 50 }).withMessage("El apellido debe tener entre 2 y 50 caracteres")
    .matches(/^[a-zA-Z√°√©√≠√≥√∫√Å√â√ç√ì√ö√±√ë\s]+$/).withMessage("El apellido solo puede contener letras, espacios y acentos"),
  body("phone")
    .matches(/^\d+$/).withMessage("El tel√©fono debe ser un n√∫mero")
    .isLength({ min: 10, max: 15 }).withMessage("El tel√©fono debe tener entre 10 y 15 d√≠gitos"),
  body("cuit")
    .matches(/^\d+$/).withMessage("El CUIT debe ser un n√∫mero")
    .isLength({ min: 11, max: 11 }).withMessage("El CUIT debe tener exactamente 11 d√≠gitos"),
  handleInputErrors,
  updateUser
);

// üìå DELETE user
router.delete(
  "/:id",
  param("id").isInt().withMessage("ID no v√°lido"),
  handleInputErrors,
  deleteUser
);

export default router;
